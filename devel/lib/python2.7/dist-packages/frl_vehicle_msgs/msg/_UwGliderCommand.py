# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frl_vehicle_msgs/UwGliderCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UwGliderCommand(genpy.Message):
  _md5sum = "46987b8e354d167ab0e0bff75d4c21e0"
  _type = "frl_vehicle_msgs/UwGliderCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Part of underwater glider interface.  This message is
# typically published by the backseat dirver and subscribed to by
# the (simulated) glider.
# Unless explictly noted, units and coordinate conventions
# follow [REP 103: Standared Units of Measure and Coordinate Conventions](https://www.ros.org/reps/rep-0103.html)

# header.stamp specifies the ROS time for this measurement 
Header header

# Pitch control mode. Constants used as enum.
uint8 pitch_cmd_type
uint8 PITCH_CMD_NONE=0
uint8 PITCH_CMD_BATT_POS=1
uint8 PITCH_CMD_TARGET_ONCE=2
uint8 PITCH_CMD_TARGET_SERVO=3

# Command: the desired pitch value
# If pitch_cmd_type==PITCH_CMD_NONE, leave pitch as it is
# If pitch_cmd_type==PITCH_CMD_BATT_POS, specifies the position of the battery pack in m.
# If pitch_cmd_type==PITCH_CMD_TARGET_ONCE, specifies the desired pitch angle in radians. Positive pitch is nose down. A table lookup is used to compute the desired battery position and no corrections are made.
# If pitch_cmd_type==PITCH_CMD_TARGET_SERVO, specifies the desired pitch angle in radians. Positive pitch is nose down. The battery position is constantly servoed to maintain the target pitch.
float32 target_pitch_value

# Constants as an enum for modes of thrust input
uint8 motor_cmd_type
uint8 MOTOR_CMD_NONE=0
uint8 MOTOR_CMD_VOLTAGE=1
uint8 MOTOR_CMD_POWER=2

# Command: motor/thruster
# If motor_cmd_type==MOTOR_CMD_NONE, leave motor/thrust as it is
# If motor_cmd_type==MOTOR_CMD_VOLTAGE, expect range [0-100]
# If motor_cmd_type==MOTOR_CMD_POWER, expect range [1-9]
float32 target_motor_cmd

# Yaw control mode.  Constants used as enum.
uint8 rudder_control_mode
uint8 RUDDER_CONTROL_NONE=0
uint8 RUDDER_CONTROL_HEADING=1
uint8 RUDDER_CONTROL_ANGLE=2

# Command: target heading in degrees NED
# Only pertinent if rudder_control_mode==RUDDER_CONTROL_HEADING
# Note - this is a departure from the ROS standard of radians in ENU
float32 target_heading

# Command: target rudder angle either centered, full port or full stbd
# Only pertinent if rudder_control_mode==RUDDER_CONTROL_ANGLE
uint8 rudder_angle
uint8 RUDDER_ANGLE_CENTER=1
uint8 RUDDER_ANGLE_PORT=2
uint8 RUDDER_ANGLE_STBD=3
uint8 RUDDER_ANGLE_DIRECT=4

# Command: target rudder angle in radians. Positive turns to starboard.
# Only pertinent if rudder_angle==RUDDER_ANGLE_DIRECT
float32 target_rudder_angle

# Command: buoyancy engine pumped volume in cm^3. Zero is neutrally buoyant, positive causes the glider to ascend.
float32 target_pumped_volume

# command : target lat/lon
# float32 target_lat
# float32 target_lon

# Command : target sonar parameters
# uint32 sonar_buckets
# float32 sonart_start_angle
# float32 sonar_end_angle

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  PITCH_CMD_NONE = 0
  PITCH_CMD_BATT_POS = 1
  PITCH_CMD_TARGET_ONCE = 2
  PITCH_CMD_TARGET_SERVO = 3
  MOTOR_CMD_NONE = 0
  MOTOR_CMD_VOLTAGE = 1
  MOTOR_CMD_POWER = 2
  RUDDER_CONTROL_NONE = 0
  RUDDER_CONTROL_HEADING = 1
  RUDDER_CONTROL_ANGLE = 2
  RUDDER_ANGLE_CENTER = 1
  RUDDER_ANGLE_PORT = 2
  RUDDER_ANGLE_STBD = 3
  RUDDER_ANGLE_DIRECT = 4

  __slots__ = ['header','pitch_cmd_type','target_pitch_value','motor_cmd_type','target_motor_cmd','rudder_control_mode','target_heading','rudder_angle','target_rudder_angle','target_pumped_volume']
  _slot_types = ['std_msgs/Header','uint8','float32','uint8','float32','uint8','float32','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pitch_cmd_type,target_pitch_value,motor_cmd_type,target_motor_cmd,rudder_control_mode,target_heading,rudder_angle,target_rudder_angle,target_pumped_volume

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UwGliderCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pitch_cmd_type is None:
        self.pitch_cmd_type = 0
      if self.target_pitch_value is None:
        self.target_pitch_value = 0.
      if self.motor_cmd_type is None:
        self.motor_cmd_type = 0
      if self.target_motor_cmd is None:
        self.target_motor_cmd = 0.
      if self.rudder_control_mode is None:
        self.rudder_control_mode = 0
      if self.target_heading is None:
        self.target_heading = 0.
      if self.rudder_angle is None:
        self.rudder_angle = 0
      if self.target_rudder_angle is None:
        self.target_rudder_angle = 0.
      if self.target_pumped_volume is None:
        self.target_pumped_volume = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.pitch_cmd_type = 0
      self.target_pitch_value = 0.
      self.motor_cmd_type = 0
      self.target_motor_cmd = 0.
      self.rudder_control_mode = 0
      self.target_heading = 0.
      self.rudder_angle = 0
      self.target_rudder_angle = 0.
      self.target_pumped_volume = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BfBfBfB2f().pack(_x.pitch_cmd_type, _x.target_pitch_value, _x.motor_cmd_type, _x.target_motor_cmd, _x.rudder_control_mode, _x.target_heading, _x.rudder_angle, _x.target_rudder_angle, _x.target_pumped_volume))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.pitch_cmd_type, _x.target_pitch_value, _x.motor_cmd_type, _x.target_motor_cmd, _x.rudder_control_mode, _x.target_heading, _x.rudder_angle, _x.target_rudder_angle, _x.target_pumped_volume,) = _get_struct_BfBfBfB2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BfBfBfB2f().pack(_x.pitch_cmd_type, _x.target_pitch_value, _x.motor_cmd_type, _x.target_motor_cmd, _x.rudder_control_mode, _x.target_heading, _x.rudder_angle, _x.target_rudder_angle, _x.target_pumped_volume))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.pitch_cmd_type, _x.target_pitch_value, _x.motor_cmd_type, _x.target_motor_cmd, _x.rudder_control_mode, _x.target_heading, _x.rudder_angle, _x.target_rudder_angle, _x.target_pumped_volume,) = _get_struct_BfBfBfB2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BfBfBfB2f = None
def _get_struct_BfBfBfB2f():
    global _struct_BfBfBfB2f
    if _struct_BfBfBfB2f is None:
        _struct_BfBfBfB2f = struct.Struct("<BfBfBfB2f")
    return _struct_BfBfBfB2f
