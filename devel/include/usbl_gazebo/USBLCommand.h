// Generated by gencpp from file usbl_gazebo/USBLCommand.msg
// DO NOT EDIT!


#ifndef USBL_GAZEBO_MESSAGE_USBLCOMMAND_H
#define USBL_GAZEBO_MESSAGE_USBLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace usbl_gazebo
{
template <class ContainerAllocator>
struct USBLCommand_
{
  typedef USBLCommand_<ContainerAllocator> Type;

  USBLCommand_()
    : transponderID(0)
    , commandID(0)
    , data()  {
    }
  USBLCommand_(const ContainerAllocator& _alloc)
    : transponderID(0)
    , commandID(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _transponderID_type;
  _transponderID_type transponderID;

   typedef int32_t _commandID_type;
  _commandID_type commandID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::usbl_gazebo::USBLCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usbl_gazebo::USBLCommand_<ContainerAllocator> const> ConstPtr;

}; // struct USBLCommand_

typedef ::usbl_gazebo::USBLCommand_<std::allocator<void> > USBLCommand;

typedef boost::shared_ptr< ::usbl_gazebo::USBLCommand > USBLCommandPtr;
typedef boost::shared_ptr< ::usbl_gazebo::USBLCommand const> USBLCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::usbl_gazebo::USBLCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::usbl_gazebo::USBLCommand_<ContainerAllocator1> & lhs, const ::usbl_gazebo::USBLCommand_<ContainerAllocator2> & rhs)
{
  return lhs.transponderID == rhs.transponderID &&
    lhs.commandID == rhs.commandID &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::usbl_gazebo::USBLCommand_<ContainerAllocator1> & lhs, const ::usbl_gazebo::USBLCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace usbl_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usbl_gazebo::USBLCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usbl_gazebo::USBLCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usbl_gazebo::USBLCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3f96dcf9a7d238a1575db4f837d5748";
  }

  static const char* value(const ::usbl_gazebo::USBLCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3f96dcf9a7d238aULL;
  static const uint64_t static_value2 = 0x1575db4f837d5748ULL;
};

template<class ContainerAllocator>
struct DataType< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "usbl_gazebo/USBLCommand";
  }

  static const char* value(const ::usbl_gazebo::USBLCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 transponderID\n"
"int32 commandID\n"
"string data\n"
;
  }

  static const char* value(const ::usbl_gazebo::USBLCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transponderID);
      stream.next(m.commandID);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct USBLCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usbl_gazebo::USBLCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::usbl_gazebo::USBLCommand_<ContainerAllocator>& v)
  {
    s << indent << "transponderID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.transponderID);
    s << indent << "commandID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.commandID);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USBL_GAZEBO_MESSAGE_USBLCOMMAND_H
